// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using itservicecenter.Data;

#nullable disable

namespace itservicecenter.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("itservicecenter.Entities.Models.AutenfitikacijaToken", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("IpAdresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOtkljucano")
                        .HasColumnType("bit");

                    b.Property<int>("KorisnickiNalogID")
                        .HasColumnType("int");

                    b.Property<string>("TwoFKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vrijednost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VrijemeEvidentiranja")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("KorisnickiNalogID");

                    b.ToTable("AutenfitikacijaToken");
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.FAQ", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Odgovor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pitanje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("FAQ");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Odgovor = "Cijena servisa se određuje u odnosu na model i kvar uređaja.",
                            Pitanje = "Koja je cijena servisa?"
                        },
                        new
                        {
                            ID = 2,
                            Odgovor = "Vrijeme završetka servisa se određuje u trenutku kada se uređaj ostavlja na servis. Količina servisa, vrsta kvara, vrijeme ostavljanja servisa su neki od parametra koju utječu kada će vaš servis biti završen.",
                            Pitanje = "Kada će moj telefon biti završen?"
                        },
                        new
                        {
                            ID = 3,
                            Odgovor = "Servis se plaća pri preuzimanju uređaja iz poslovnice.",
                            Pitanje = "Kada se plaća servis?"
                        });
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.Grad", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Grad");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Naziv = "Zenica"
                        },
                        new
                        {
                            ID = 2,
                            Naziv = "Bihać"
                        },
                        new
                        {
                            ID = 3,
                            Naziv = "Bijeljina"
                        },
                        new
                        {
                            ID = 4,
                            Naziv = "Mostar"
                        },
                        new
                        {
                            ID = 5,
                            Naziv = "Cazin"
                        },
                        new
                        {
                            ID = 6,
                            Naziv = "Čapljina"
                        },
                        new
                        {
                            ID = 7,
                            Naziv = "Drventa"
                        },
                        new
                        {
                            ID = 8,
                            Naziv = "Doboj"
                        },
                        new
                        {
                            ID = 9,
                            Naziv = "Goražde"
                        },
                        new
                        {
                            ID = 10,
                            Naziv = "Gračanica"
                        },
                        new
                        {
                            ID = 11,
                            Naziv = "Gradačac"
                        },
                        new
                        {
                            ID = 12,
                            Naziv = "Gradiška"
                        },
                        new
                        {
                            ID = 13,
                            Naziv = "Konjic"
                        },
                        new
                        {
                            ID = 14,
                            Naziv = "Laktaši"
                        },
                        new
                        {
                            ID = 15,
                            Naziv = "Livno"
                        },
                        new
                        {
                            ID = 16,
                            Naziv = "Lukavac"
                        },
                        new
                        {
                            ID = 17,
                            Naziv = "Ljubuški"
                        },
                        new
                        {
                            ID = 18,
                            Naziv = "Bosanska Krupa"
                        },
                        new
                        {
                            ID = 19,
                            Naziv = "Orašje"
                        },
                        new
                        {
                            ID = 20,
                            Naziv = "Prijedor"
                        },
                        new
                        {
                            ID = 21,
                            Naziv = "Prnjavor"
                        },
                        new
                        {
                            ID = 22,
                            Naziv = "Sarajevo"
                        },
                        new
                        {
                            ID = 23,
                            Naziv = "Srebrenik"
                        },
                        new
                        {
                            ID = 24,
                            Naziv = "Stolac"
                        },
                        new
                        {
                            ID = 25,
                            Naziv = "Široki Brijeg"
                        },
                        new
                        {
                            ID = 26,
                            Naziv = "Travnik"
                        },
                        new
                        {
                            ID = 27,
                            Naziv = "Tuzla"
                        },
                        new
                        {
                            ID = 28,
                            Naziv = "Visoko"
                        },
                        new
                        {
                            ID = 29,
                            Naziv = "Zavidovići"
                        },
                        new
                        {
                            ID = 30,
                            Naziv = "Banja Luka"
                        },
                        new
                        {
                            ID = 31,
                            Naziv = "Zvornik"
                        },
                        new
                        {
                            ID = 32,
                            Naziv = "Živinice"
                        },
                        new
                        {
                            ID = 33,
                            Naziv = "Donji Vakuf"
                        },
                        new
                        {
                            ID = 34,
                            Naziv = "Zavidovići"
                        });
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.Kategorija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Kategorija");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Naziv = "Mobitel"
                        },
                        new
                        {
                            ID = 2,
                            Naziv = "Tablet"
                        },
                        new
                        {
                            ID = 3,
                            Naziv = "Laptop"
                        },
                        new
                        {
                            ID = 4,
                            Naziv = "Računar"
                        });
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.KorisnickiNalog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is2FActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProdavac")
                        .HasColumnType("bit");

                    b.Property<bool>("IsServiser")
                        .HasColumnType("bit");

                    b.Property<bool>("JelObrisan")
                        .HasColumnType("bit");

                    b.Property<string>("LozinkaHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlikaKorisnikaMala")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlikaKorisnikaVelika")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("KorsnickiNalog");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.LogKretanjePoSistemu", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAdresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsException")
                        .HasColumnType("bit");

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<string>("PostData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QueryPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Vrijeme")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("KorisnikID");

                    b.ToTable("LogKretanjePoSistemu");
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.Prodavac_Uredjaj", b =>
                {
                    b.Property<int>("ProdavacID")
                        .HasColumnType("int");

                    b.Property<int>("UredjajID")
                        .HasColumnType("int");

                    b.Property<int>("ServisniNalogID")
                        .HasColumnType("int");

                    b.Property<int?>("RacunID")
                        .HasColumnType("int");

                    b.HasKey("ProdavacID", "UredjajID", "ServisniNalogID");

                    b.HasIndex("RacunID");

                    b.HasIndex("ServisniNalogID");

                    b.HasIndex("UredjajID");

                    b.ToTable("Prodavac_Uredjaj");

                    b.HasData(
                        new
                        {
                            ProdavacID = 4,
                            UredjajID = 1,
                            ServisniNalogID = 1,
                            RacunID = 1
                        },
                        new
                        {
                            ProdavacID = 4,
                            UredjajID = 2,
                            ServisniNalogID = 2
                        },
                        new
                        {
                            ProdavacID = 4,
                            UredjajID = 3,
                            ServisniNalogID = 3
                        },
                        new
                        {
                            ProdavacID = 5,
                            UredjajID = 4,
                            ServisniNalogID = 4
                        },
                        new
                        {
                            ProdavacID = 5,
                            UredjajID = 5,
                            ServisniNalogID = 5
                        });
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.Proizvodjac", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Proizvodjac");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Naziv = "Samsung"
                        },
                        new
                        {
                            ID = 2,
                            Naziv = "Apple"
                        },
                        new
                        {
                            ID = 3,
                            Naziv = "Xiaomi"
                        });
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.Racun", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<float>("CijenaServisa")
                        .HasColumnType("real");

                    b.Property<DateTime>("DatumPreuzimanja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Garancija")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Napomena")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SifraRacuna")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Racun");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CijenaServisa = 210f,
                            DatumPreuzimanja = new DateTime(2024, 5, 28, 11, 52, 33, 489, DateTimeKind.Local).AddTicks(5681),
                            Garancija = "30 Dana",
                            Napomena = "",
                            SifraRacuna = "sifraracuna1"
                        });
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.Serviser_Kategorija", b =>
                {
                    b.Property<int>("ServiserID")
                        .HasColumnType("int");

                    b.Property<int>("KategorijaID")
                        .HasColumnType("int");

                    b.HasKey("ServiserID", "KategorijaID");

                    b.HasIndex("KategorijaID");

                    b.ToTable("Serviser_Kategorija");

                    b.HasData(
                        new
                        {
                            ServiserID = 2,
                            KategorijaID = 1
                        },
                        new
                        {
                            ServiserID = 2,
                            KategorijaID = 2
                        },
                        new
                        {
                            ServiserID = 3,
                            KategorijaID = 3
                        },
                        new
                        {
                            ServiserID = 3,
                            KategorijaID = 4
                        });
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.Serviser_ServisniDio", b =>
                {
                    b.Property<int>("ServiserID")
                        .HasColumnType("int");

                    b.Property<int>("ServisniDioID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("Kolicina")
                        .HasColumnType("int");

                    b.HasKey("ServiserID", "ServisniDioID", "Datum");

                    b.HasIndex("ServisniDioID");

                    b.ToTable("Serviser_ServisniDio");

                    b.HasData(
                        new
                        {
                            ServiserID = 2,
                            ServisniDioID = 1,
                            Datum = new DateTime(2024, 5, 28, 11, 52, 33, 489, DateTimeKind.Local).AddTicks(6191),
                            Kolicina = 3
                        },
                        new
                        {
                            ServiserID = 2,
                            ServisniDioID = 2,
                            Datum = new DateTime(2024, 5, 28, 11, 52, 33, 489, DateTimeKind.Local).AddTicks(6200),
                            Kolicina = 3
                        },
                        new
                        {
                            ServiserID = 2,
                            ServisniDioID = 3,
                            Datum = new DateTime(2024, 5, 28, 11, 52, 33, 489, DateTimeKind.Local).AddTicks(6202),
                            Kolicina = 2
                        },
                        new
                        {
                            ServiserID = 2,
                            ServisniDioID = 4,
                            Datum = new DateTime(2024, 5, 28, 11, 52, 33, 489, DateTimeKind.Local).AddTicks(6205),
                            Kolicina = 1
                        });
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.Serviser_Uredjaj", b =>
                {
                    b.Property<int>("ServiserID")
                        .HasColumnType("int");

                    b.Property<int>("UredjajID")
                        .HasColumnType("int");

                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<bool>("Popravljeno")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiserID", "UredjajID");

                    b.HasIndex("UredjajID");

                    b.ToTable("Serviser_Uredjaj");

                    b.HasData(
                        new
                        {
                            ServiserID = 2,
                            UredjajID = 1,
                            ID = 1,
                            Popravljeno = true,
                            Status = "Završen uredja"
                        },
                        new
                        {
                            ServiserID = 2,
                            UredjajID = 2,
                            ID = 2,
                            Popravljeno = false,
                            Status = "Radi se"
                        },
                        new
                        {
                            ServiserID = 2,
                            UredjajID = 5,
                            ID = 3,
                            Popravljeno = false,
                            Status = "Ceka dio"
                        },
                        new
                        {
                            ServiserID = 3,
                            UredjajID = 3,
                            ID = 4,
                            Popravljeno = false,
                            Status = "Radi se sistem..."
                        },
                        new
                        {
                            ServiserID = 2,
                            UredjajID = 4,
                            ID = 5,
                            Popravljeno = false,
                            Status = "Analiza"
                        });
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.ServisniDio", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<float>("Cijena")
                        .HasColumnType("real");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProizvodjacID")
                        .HasColumnType("int");

                    b.Property<int>("VrstaDioID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProizvodjacID");

                    b.HasIndex("VrstaDioID");

                    b.ToTable("ServisniDio");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Cijena = 100f,
                            Naziv = "Sasmung Galaxy A71",
                            ProizvodjacID = 1,
                            VrstaDioID = 1
                        },
                        new
                        {
                            ID = 2,
                            Cijena = 50f,
                            Naziv = "Sasmung Galaxy A71",
                            ProizvodjacID = 1,
                            VrstaDioID = 2
                        },
                        new
                        {
                            ID = 3,
                            Cijena = 220f,
                            Naziv = "Iphone 11 pro max 1klasa",
                            ProizvodjacID = 2,
                            VrstaDioID = 1
                        },
                        new
                        {
                            ID = 4,
                            Cijena = 50f,
                            Naziv = "Sasmung Galaxy A71",
                            ProizvodjacID = 1,
                            VrstaDioID = 3
                        });
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.ServisniNalog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DatumPredaje")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumZaprimanja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Napomena")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SifraNaloga")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ServisniNalog");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DatumPredaje = new DateTime(2024, 5, 30, 11, 52, 33, 489, DateTimeKind.Local).AddTicks(6777),
                            DatumZaprimanja = new DateTime(2024, 5, 28, 11, 52, 33, 489, DateTimeKind.Local).AddTicks(6769),
                            Napomena = "Ocistiti prednju kameru",
                            Problem = "Zamjena LCDa",
                            SifraNaloga = "sifraservisa1"
                        },
                        new
                        {
                            ID = 2,
                            DatumPredaje = new DateTime(2024, 5, 30, 11, 52, 33, 489, DateTimeKind.Local).AddTicks(6787),
                            DatumZaprimanja = new DateTime(2024, 5, 28, 11, 52, 33, 489, DateTimeKind.Local).AddTicks(6785),
                            Napomena = "",
                            Problem = "zakljucan google acc",
                            SifraNaloga = "sifraservisa2"
                        },
                        new
                        {
                            ID = 3,
                            DatumPredaje = new DateTime(2024, 5, 30, 11, 52, 33, 489, DateTimeKind.Local).AddTicks(6792),
                            DatumZaprimanja = new DateTime(2024, 5, 28, 11, 52, 33, 489, DateTimeKind.Local).AddTicks(6790),
                            Napomena = "bitini podatci",
                            Problem = "Spor",
                            SifraNaloga = "sifraservisa3"
                        },
                        new
                        {
                            ID = 4,
                            DatumPredaje = new DateTime(2024, 5, 30, 11, 52, 33, 489, DateTimeKind.Local).AddTicks(6797),
                            DatumZaprimanja = new DateTime(2024, 5, 28, 11, 52, 33, 489, DateTimeKind.Local).AddTicks(6795),
                            Napomena = "",
                            Problem = "Nema slike",
                            SifraNaloga = "sifraservisa4"
                        },
                        new
                        {
                            ID = 5,
                            DatumPredaje = new DateTime(2024, 5, 30, 11, 52, 33, 489, DateTimeKind.Local).AddTicks(6801),
                            DatumZaprimanja = new DateTime(2024, 5, 28, 11, 52, 33, 489, DateTimeKind.Local).AddTicks(6799),
                            Napomena = "",
                            Problem = "Ne radi brzo punjenje!",
                            SifraNaloga = "sifraservisa5"
                        });
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.Spol", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Spol");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Naziv = "Muški"
                        },
                        new
                        {
                            ID = 2,
                            Naziv = "Ženski"
                        });
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.Uredjaj", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("KategorijaID")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("KategorijaID");

                    b.ToTable("Uredjaj");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            KategorijaID = 1,
                            Naziv = "Samsung Galaxy A71"
                        },
                        new
                        {
                            ID = 2,
                            KategorijaID = 2,
                            Naziv = "Samsung Galaxy Tab A lite"
                        },
                        new
                        {
                            ID = 3,
                            KategorijaID = 3,
                            Naziv = "Lenovo IdeaPad"
                        },
                        new
                        {
                            ID = 4,
                            KategorijaID = 4,
                            Naziv = "Gaming računar"
                        },
                        new
                        {
                            ID = 5,
                            KategorijaID = 1,
                            Naziv = "Samsung Galaxy S21"
                        });
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.VrstaDio", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("VrstaDio");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Naziv = "LCD"
                        },
                        new
                        {
                            ID = 2,
                            Naziv = "Baterija"
                        },
                        new
                        {
                            ID = 3,
                            Naziv = "Pločica punjenja"
                        });
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.Admin", b =>
                {
                    b.HasBaseType("itservicecenter.Entities.Models.KorisnickiNalog");

                    b.Property<int>("GradID")
                        .HasColumnType("int");

                    b.Property<int>("SpolID")
                        .HasColumnType("int");

                    b.HasIndex("GradID");

                    b.HasIndex("SpolID");

                    b.ToTable("Admin");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Email = "ajdin@ajdin.com",
                            Ime = "Ajdin",
                            Is2FActive = false,
                            IsAdmin = true,
                            IsProdavac = false,
                            IsServiser = false,
                            JelObrisan = false,
                            LozinkaHash = "NOihN67eSsuNCaFDgTyKpDab33A=",
                            LozinkaSalt = "7UMrsL8Z/vUrJ3tCDY/fhA==",
                            Prezime = "Kuduzović",
                            Username = "ajdin",
                            GradID = 22,
                            SpolID = 1
                        });
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.Prodavac", b =>
                {
                    b.HasBaseType("itservicecenter.Entities.Models.KorisnickiNalog");

                    b.Property<int>("GradID")
                        .HasColumnType("int");

                    b.Property<int>("SpolID")
                        .HasColumnType("int");

                    b.HasIndex("GradID");

                    b.HasIndex("SpolID");

                    b.ToTable("Prodavac");

                    b.HasData(
                        new
                        {
                            ID = 4,
                            Email = "alina@alina.com",
                            Ime = "Alina",
                            Is2FActive = false,
                            IsAdmin = false,
                            IsProdavac = true,
                            IsServiser = false,
                            JelObrisan = false,
                            LozinkaHash = "QbjiQAlg8pFWi8+Ag0sDvyVXxLQ=",
                            LozinkaSalt = "yjHaJNY+U/uYed7SgDdMTg==",
                            Prezime = "Burić",
                            Username = "alina",
                            GradID = 4,
                            SpolID = 2
                        },
                        new
                        {
                            ID = 5,
                            Email = "vedad@vedad.com",
                            Ime = "Vedad",
                            Is2FActive = false,
                            IsAdmin = false,
                            IsProdavac = true,
                            IsServiser = false,
                            JelObrisan = false,
                            LozinkaHash = "5gHtatSvE+YvoZ6QSw7flpGde5E=",
                            LozinkaSalt = "86gCx8z5K2jATyuQVRcE8w==",
                            Prezime = "Keskin",
                            Username = "vedad",
                            GradID = 4,
                            SpolID = 1
                        });
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.Serviser", b =>
                {
                    b.HasBaseType("itservicecenter.Entities.Models.KorisnickiNalog");

                    b.Property<int>("GradID")
                        .HasColumnType("int");

                    b.Property<int>("SpolID")
                        .HasColumnType("int");

                    b.HasIndex("GradID");

                    b.HasIndex("SpolID");

                    b.ToTable("Serviser");

                    b.HasData(
                        new
                        {
                            ID = 2,
                            Email = "jasir@jasir.com",
                            Ime = "Jasir",
                            Is2FActive = false,
                            IsAdmin = false,
                            IsProdavac = false,
                            IsServiser = true,
                            JelObrisan = false,
                            LozinkaHash = "AQvQTfey3TKlD0/hf8RwHUu3ghQ=",
                            LozinkaSalt = "m9VeSmOl+1qwx9uVAI38/w==",
                            Prezime = "Burić",
                            Username = "jasir",
                            GradID = 1,
                            SpolID = 1
                        },
                        new
                        {
                            ID = 3,
                            Email = "adis@adis.com",
                            Ime = "Adis",
                            Is2FActive = false,
                            IsAdmin = false,
                            IsProdavac = false,
                            IsServiser = true,
                            JelObrisan = false,
                            LozinkaHash = "V6UW+Rhy5lrX/4C9Ylhbjh/fQeU=",
                            LozinkaSalt = "EBtJVyzeN07GPVvuw2hSFQ==",
                            Prezime = "Mešić",
                            Username = "adis",
                            GradID = 1,
                            SpolID = 1
                        });
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.AutenfitikacijaToken", b =>
                {
                    b.HasOne("itservicecenter.Entities.Models.KorisnickiNalog", "KorisnickiNalog")
                        .WithMany()
                        .HasForeignKey("KorisnickiNalogID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("KorisnickiNalog");
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.LogKretanjePoSistemu", b =>
                {
                    b.HasOne("itservicecenter.Entities.Models.KorisnickiNalog", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.Prodavac_Uredjaj", b =>
                {
                    b.HasOne("itservicecenter.Entities.Models.Prodavac", "Prodavac")
                        .WithMany()
                        .HasForeignKey("ProdavacID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("itservicecenter.Entities.Models.Racun", "Racun")
                        .WithMany()
                        .HasForeignKey("RacunID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("itservicecenter.Entities.Models.ServisniNalog", "ServisniNalog")
                        .WithMany()
                        .HasForeignKey("ServisniNalogID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("itservicecenter.Entities.Models.Uredjaj", "Uredjaj")
                        .WithMany()
                        .HasForeignKey("UredjajID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Prodavac");

                    b.Navigation("Racun");

                    b.Navigation("ServisniNalog");

                    b.Navigation("Uredjaj");
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.Serviser_Kategorija", b =>
                {
                    b.HasOne("itservicecenter.Entities.Models.Kategorija", "Kategorija")
                        .WithMany()
                        .HasForeignKey("KategorijaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("itservicecenter.Entities.Models.Serviser", "Serviser")
                        .WithMany()
                        .HasForeignKey("ServiserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Kategorija");

                    b.Navigation("Serviser");
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.Serviser_ServisniDio", b =>
                {
                    b.HasOne("itservicecenter.Entities.Models.Serviser", "Serviser")
                        .WithMany()
                        .HasForeignKey("ServiserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("itservicecenter.Entities.Models.ServisniDio", "ServisniDio")
                        .WithMany()
                        .HasForeignKey("ServisniDioID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Serviser");

                    b.Navigation("ServisniDio");
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.Serviser_Uredjaj", b =>
                {
                    b.HasOne("itservicecenter.Entities.Models.Serviser", "Serviser")
                        .WithMany()
                        .HasForeignKey("ServiserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("itservicecenter.Entities.Models.Uredjaj", "Uredjaj")
                        .WithMany()
                        .HasForeignKey("UredjajID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Serviser");

                    b.Navigation("Uredjaj");
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.ServisniDio", b =>
                {
                    b.HasOne("itservicecenter.Entities.Models.Proizvodjac", "Proizvodjac")
                        .WithMany()
                        .HasForeignKey("ProizvodjacID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("itservicecenter.Entities.Models.VrstaDio", "VrstaDio")
                        .WithMany()
                        .HasForeignKey("VrstaDioID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Proizvodjac");

                    b.Navigation("VrstaDio");
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.Uredjaj", b =>
                {
                    b.HasOne("itservicecenter.Entities.Models.Kategorija", "Kategorija")
                        .WithMany()
                        .HasForeignKey("KategorijaID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Kategorija");
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.Admin", b =>
                {
                    b.HasOne("itservicecenter.Entities.Models.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("itservicecenter.Entities.Models.KorisnickiNalog", null)
                        .WithOne()
                        .HasForeignKey("itservicecenter.Entities.Models.Admin", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("itservicecenter.Entities.Models.Spol", "Spol")
                        .WithMany()
                        .HasForeignKey("SpolID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Grad");

                    b.Navigation("Spol");
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.Prodavac", b =>
                {
                    b.HasOne("itservicecenter.Entities.Models.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("itservicecenter.Entities.Models.KorisnickiNalog", null)
                        .WithOne()
                        .HasForeignKey("itservicecenter.Entities.Models.Prodavac", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("itservicecenter.Entities.Models.Spol", "Spol")
                        .WithMany()
                        .HasForeignKey("SpolID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Grad");

                    b.Navigation("Spol");
                });

            modelBuilder.Entity("itservicecenter.Entities.Models.Serviser", b =>
                {
                    b.HasOne("itservicecenter.Entities.Models.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("itservicecenter.Entities.Models.KorisnickiNalog", null)
                        .WithOne()
                        .HasForeignKey("itservicecenter.Entities.Models.Serviser", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("itservicecenter.Entities.Models.Spol", "Spol")
                        .WithMany()
                        .HasForeignKey("SpolID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Grad");

                    b.Navigation("Spol");
                });
#pragma warning restore 612, 618
        }
    }
}
